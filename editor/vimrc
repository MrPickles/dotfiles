" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set nobackup
set nowritebackup
set history=50 " keep 50 lines of command line history
set ruler " show the cursor position all the time
set showcmd " display incomplete commands
set incsearch " do incremental searching
set nowrap " Switch wrap off for everything
set number
set numberwidth=5
set laststatus=2 " Always display the status line

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set expandtab

" Tab completion options
" (only complete to the longest unambiguous match, and show a menu)
set completeopt=longest,menu
set wildmode=list:longest,list:full
set complete=.,t

" Remap :w and :q to allow the capital letter versions.
command! Q q
command! W w
command! WQ wq
command! Wq wq
command! WA wa
command! Wa wa
command! QA qa
command! Qa qa
command! Wqa wqa
command! WQa wqa
command! WQA wqa

" case only matters with mixed case expressions
set ignorecase
set smartcase
if exists("&wildignorecase")
  set wildignorecase
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
  set hlsearch

  " Color scheme
  syntax enable
  set background=dark
  colorscheme solarized
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  set cino=N-s " do not indent after C++ namespace
  " Set File type to 'text' for files ending in .txt
  autocmd BufNewFile,BufRead *.txt setfiletype text
  " Enable soft-wrapping for text files
  autocmd FileType text,markdown,html,xhtml,eruby setlocal wrap linebreak nolist
  " Set default tab width to 4 spaces in Python and Bazel
  au Filetype python,bzl setl et ts=4 sw=4
  " Set shell script syntax highlighting for zsh-theme files
  au BufRead,BufNewFile *.zsh-theme set syntax=sh
  " For Haml
  au! BufRead,BufNewFile *.haml setfiletype haml

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
    au!
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif
    " Automatically load .vimrc source when saved
    autocmd BufWritePost .vimrc nested source $MYVIMRC
  augroup END
else
  " always set autoindenting on
  set autoindent
endif " has("autocmd")

if executable('fzf')
  " Remap ctrl-P to execute fzf :)
  nnoremap <silent> <C-p> :FZF<CR>
endif

if executable('rg')
  " Space key will open up search.
  nnoremap <Space> :Rg<CR>
  nnoremap <leader><Space> :Rg!<CR>

  " Use rg over ag and grep and ack if available.
  set grepprg=rg\ --vimgrep\ --color=never\ --no-heading\ --hidden
  " Use rg in ack.vim
  let g:ackprg = 'rg --vimgrep'
elseif executable('ag')
  " Use ag over grep and ack if available.
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in ack.vim
  let g:ackprg = 'ag --vimgrep'
elseif executable("ack")
  " Use ack instead of grep if available
  set grepprg=ack\ -H\ --nogroup\ --nocolor\ --ignore-dir=tmp\ --ignore-dir=coverage
endif

" Set up vim airline
let g:airline_powerline_fonts = 1

" Local config
if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif
